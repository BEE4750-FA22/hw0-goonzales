---
title: "BEE 4750/5750 Homework 0"
author: "Julia Gonzales (jeg334)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
  term: true
  results: tex
  cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

Pkg.add("Weave")
# Problem 1

## Problem 1.1
```julia
function square_number(x)
  x*x
  return x*x
end
```
## Problem 1.2
We can see that 5^2 = `j square_number(5)`

a

## Problem 1.3
```julia; eval = true; out_width = "12 cm", label = "square-plot"
using Pkg
Pkg.add("Plots")
# plot your vectors 
using Plots
plot(square_number, -10, 10,title = "Square Numbers over [-10,10]",xlabel = "Range", ylabel = "Squared Numbers")
```
```math
\ref{fig:square-plot}
```

# Problem 2

## Problem 2.1
```math
Since x divided by \sqrt{x} is \sqrt{x}, \sqrt{x} is a sort of middle point for numbers dividing x. 
If a is larger than \sqrt{x}, than x\div a will be smaller than \sqrt{x}. Alternatively, if a is smaller than \sqrt[2]{x}, then x\div a will be larger than \sqrt[2]{x}. 
a > \sqrt{x} 
a\cdot\sqrt{x} > sqrt{x}\cdot\sqrt{x}
a\cdot\sqrt{x} > x 
\sqrt{x} > x\div a 

a < \sqrt{x}
a\cdot\sqrt{x} < sqrt{x}\cdot\sqrt{x}
a\cdot\sqrt{x} < x 
\sqrt{x} < x/a
```
Therefore, the square root must lie between a and x/a. 

## Problem 2.2
```julia
function square_root(x,a)
  errortol = 10^-2
  error = 1
  while error > errortol
    avg = ((x/a)+(a))/2
    a = avg
    error = abs(x/a - x)
  end 
end
sqroot = square_root(2,1)
```
The square root of 2 is $sqroot. 

# Problem 3

## Problem 3.1
 ```julia
 vect = rand(20)
```
## Problem 3.2
```julia
function mean!(vect)
  newsum = 0
  oldnum = 0
  for i in eachindex(vect)
  newnum = vect[i]
  newsum = oldnum + newnum
  oldnum = newnum 
  end 
  mean = newsum/length(vect)
  return mean
end

function demean(vect)
  mean = mean!(vect)
  vectnew = vect
  for i in eachindex(vect)
  vectnew[i] -= mean
  end
  return vectnew
end

```

## Problem 3.3
```julia
vec = rand(10)
vec[1:2] .= 0
vec[9:10] .= 0
vec[3:8] .= 1
```


## Problem 3.4
```julia
fmatrix = rand(5,5)
using Statistics 
newfmatrix = fmatrix
for i in 1:5
  newfmatrix[:,i] = fmatrix[:,i] .- mean(fmatrix[:,i])
end
println(newfmatrix)
```
# Problem 4

## Problem 4.1
```julia
mu = log(0.03)
stdev = 0.005
using Distributions
log_normal_dist = LogNormal(mu, stdev)
yt = rand(log_normal_dist,100)

```

## Problem 4.2
```julia
function Xt(a,yt,b,q,T,X0)
  Xt = zeros(T+1)
  Xt[1] = X0
  for i in 2:T+1
    Xt[i] = Xt[i-1] + a + yt[i-1] + ((Xt[i-1])^q)/(1+(Xt[i-1])^q) - b*Xt[i-1]
  end
return Xt
end    

```
## Problem 4.3
```julia 
using Plots
xaxis = 0:1:100
Xt = Xt(a,yt,b,q,T,X0)
plot(xaxis, Xt, title = "Phosphorus Levels",xlabel = "t", ylabel = "Phosphorus concentration")
``` 

# References
